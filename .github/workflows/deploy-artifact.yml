name: CMake Build Matrix

on: [push, pull_request]

env:
  CMAKE_VERSION: "3.29.6"
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    outputs:
        tag: ${{ steps.git.outputs.tag }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows Latest MinGW", artifact: "Windows-MinGW",
            os: windows-latest,
            cc: "gcc", cxx: "g++"
          }
        # - {
        #     name: "Ubuntu Latest GCC", artifact: "Linux",
        #     os: ubuntu-latest,
        #     cc: "gcc", cxx: "g++"
        #   }
        # - {
        #     name: "macOS Latest Clang", artifact: "macOS",
        #     os: macos-latest,
        #     cc: "clang", cxx: "clang++"
        #   }

    steps:
    - uses: actions/checkout@v4
    - name: Checkout submodules
      id: git
      shell: cmake -P {0}
      run: |
        if (${{github.ref}} MATCHES "tags/v(.*)")
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${CMAKE_MATCH_1}\n")
        else()
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${{github.run_id}}\n")
        endif()

    - name: Download CMake
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Install Qt (Windows)
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.11'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw73'
        dir: '${{ github.workspace }}/qt/'
        install-deps: 'true'

    - name: Configure
      shell: powershell
      run: |
        $Env:CC = '${{ matrix.config.cc }}'
        $Env:CXX = '${{ matrix.config.cxx }}'

          if ("${{ runner.os }}" -eq "Windows" -and -not [string]::IsNullOrEmpty("${{ matrix.config.environment_script }}")) {
            $Env:CMAKE_PREFIX_PATH = "C:/Qt/${qtVersion}/msvc2019_64/lib/cmake"
        
            & "${{ matrix.config.environment_script }}" | Out-File environment_script_output.txt
        
          $output_lines = Get-Content environment_script_output.txt
          foreach ($line in $output_lines) {
              if ($line -match "^([a-zA-Z0-9_-]+)=(.*)$") {
                $Env[$matches[1]] = $matches[2]
              }
          }
        }
        $path_separator = ":"
        if ("${{ runner.os }}" -eq "Windows") {
          $path_separator = ";"
        }
        $Env:PATH = "$Env:GITHUB_WORKSPACE${path_separator}$Env:PATH"
          cmake -S . -B build -D CMAKE_BUILD_TYPE=$Env:BUILD_TYPE `
           -D CMAKE_C_COMPILER_LAUNCHER=ccache `
           -D CMAKE_CXX_COMPILER_LAUNCHER=ccache

        if ($LASTEXITCODE -ne 0) {
          throw "Bad exit status"
        }

    - name: Build
      shell: cmake -P {0}
      run: |

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
        set(ENV{CCACHE_COMPRESS} "true")
        set(ENV{CCACHE_COMPRESSLEVEL} "6")
        set(ENV{CCACHE_MAXSIZE} "400M")
        if ("${{ matrix.config.cxx }}" STREQUAL "cl")
          set(ENV{CCACHE_MAXSIZE} "600M")
        endif()

        execute_process(COMMAND ccache -p)
        execute_process(COMMAND ccache -z)

        execute_process(
          COMMAND cmake --build build
          RESULT_VARIABLE result
          OUTPUT_VARIABLE output
          ERROR_VARIABLE output
          ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed")
        endif()

    # - name: Run tests
    #   shell: cmake -P {0}
    #   run: |
    #     include(ProcessorCount)
    #     ProcessorCount(N)

    #     set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

    #     execute_process(
    #       COMMAND ctest -j ${N}
    #       WORKING_DIRECTORY build
    #       RESULT_VARIABLE result
    #       OUTPUT_VARIABLE output
    #       ERROR_VARIABLE output
    #       ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
    #     )
    #     if (NOT result EQUAL 0)
    #       string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
    #       string(REPLACE "\n" "%0A" test_results "${test_results}")
    #       message("::error::${test_results}")
    #       message(FATAL_ERROR "Running tests failed!")
    #     endif()

    - name: Install Strip
      run: cmake --install build --prefix instdir --strip

    # - name: Pack
    #   working-directory: instdir
    #   run: cmake -E tar cfv ../${{ matrix.config.artifact }}-${{ steps.git.outputs.tag }}.7z --format=7zip .

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        path: ./${{ matrix.config.artifact }}-${{ steps.git.outputs.tag }}.7z
        name: ${{ matrix.config.artifact }}-${{ steps.git.outputs.tag }}.7z


  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-with-dirs

    - name: Fixup artifacts
      run: |
        mkdir release
        mv release-with-dirs/*/* release/

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.tag }}
        files: release/*
        draft: false
        prerelease: false
